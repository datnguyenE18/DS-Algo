We can generate cubes of all numbers till from 1 to N^(1/3) (We donâ€™t consider 0 as 0 is not considered as a perfect cube). We iterate the cubes from largest to the smallest. 

Now if we look at the number n given to us, then we know that this number contains only log(n) + 1 digits, thus we can efficiently approach the problem if we treat this number n as a string hereafter. 

While iterating on the perfect cubes, we check if the perfect cube is a subsequence of the number n when its represented as a string.If this is the case then the deletions required for changing the number n to the current perfect cube is: 

------------------------------------------------------
No of deleted digits = No of digits in number n - 
                       Number of digits in current 
                                      perfect cube
------------------------------------------------------

Since we want the largest cube number we traverse the array of preprocessed cubes in reverse order. 